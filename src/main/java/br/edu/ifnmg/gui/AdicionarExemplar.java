/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.edu.ifnmg.gui;

import br.edu.ifnmg.book.Book;
import br.edu.ifnmg.book.BookDao;
import br.edu.ifnmg.copy.Copy;
import br.edu.ifnmg.copy.CopyDao;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joaok
 */
public class AdicionarExemplar extends javax.swing.JFrame {

    /**
     * Creates new form DeleteLivro
     */
    private static AdicionarExemplar instance;

    public AdicionarExemplar() {
        initComponents();
        // Centralização da janela
        setLocationRelativeTo(null);
        lblAtualizado.setVisible(false);
        lblSelecione.setVisible(false);
        updateBookTable();
        updateCopyTable();
    }

    public static AdicionarExemplar getInstance() {
        if (instance == null) {
            instance = new AdicionarExemplar();
        }
        instance.setAlwaysOnTop(true);
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTdsLivros = new javax.swing.JLabel();
        lblTdsLivros1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableLivro = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableExemplar = new javax.swing.JTable();
        btnAtualiza = new javax.swing.JButton();
        jSpinner = new javax.swing.JSpinner();
        lblAtualizado = new javax.swing.JLabel();
        lblSelecione = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Criar Exemplares");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblTdsLivros.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lblTdsLivros.setText("Exemplares");

        lblTdsLivros1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lblTdsLivros1.setText("Livros Cadrastrados");

        tableLivro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Titulo", "Autor", "Páginas", "Ano", "Edição"
            }
        ));
        tableLivro.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(tableLivro);
        if (tableLivro.getColumnModel().getColumnCount() > 0) {
            tableLivro.getColumnModel().getColumn(3).setHeaderValue("Páginas");
            tableLivro.getColumnModel().getColumn(4).setHeaderValue("Ano");
            tableLivro.getColumnModel().getColumn(5).setHeaderValue("Edição");
        }
        tableLivro.getAccessibleContext().setAccessibleName("Adicionar Exemplar");
        tableLivro.getAccessibleContext().setAccessibleParent(jScrollPane1);

        tableExemplar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Livro", "Disponível"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableExemplar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(tableExemplar);

        btnAtualiza.setText("Adicionar Exemplares");
        btnAtualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizaActionPerformed(evt);
            }
        });

        lblAtualizado.setForeground(new java.awt.Color(0, 0, 255));
        lblAtualizado.setText("Livro Atualizado Com Sucesso!!");

        lblSelecione.setForeground(new java.awt.Color(240, 0, 0));
        lblSelecione.setText("Selecione um Livro");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAtualiza)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(386, 386, 386))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAtualizado, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSelecione))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(lblTdsLivros1)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 45, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTdsLivros)
                                .addGap(117, 117, 117))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTdsLivros)
                    .addComponent(lblTdsLivros1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtualiza)
                    .addComponent(jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAtualizado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSelecione)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        lblSelecione.setVisible(false);
        lblAtualizado.setVisible(false);
        this.setAlwaysOnTop(false);
        this.setVisible(false);
        //TelaPrincipal.getInstance(TelaPrincipal.current_cred).setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void btnAtualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizaActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableLivro.getSelectedRow();
        if (selectedRow != -1) {
            try {
                // Obtém o título da coluna 'Titulo' na linha clicada
                Long selectedId = (Long) tableLivro.getValueAt(selectedRow, 0);
                lblSelecione.setVisible(false);
                criarCopias(selectedId);
                updateBookTable();
                updateCopyTable();
            } catch (Exception ex) {
                Logger.getLogger(AdicionarExemplar.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("Selecione um livro antes de deletar.");
            lblSelecione.setVisible(true);
        }
    }//GEN-LAST:event_btnAtualizaActionPerformed

    private void updateBookTable() {
        try {
            BookDao bookDao = new BookDao();
            List<Book> books = bookDao.findAll();

            DefaultTableModel model = (DefaultTableModel) tableLivro.getModel();
            model.setRowCount(0);

            for (Book book : books) {
                Object[] rowData = {
                    book.getId(), 
                    book.getTitle(),
                    book.getAuthors(),
                    book.getPages(),
                    book.getYear(),
                    book.getEdition(),
                };
                model.addRow(rowData);
            }

            // Adiciona um listener para a tabela
            tableLivro.getSelectionModel().addListSelectionListener(e -> {
                int selectedRow = tableLivro.getSelectedRow();
                if (selectedRow != -1) {
                    // Obtém os dados da linha selecionada
                    Long selectedId = (Long) tableLivro.getValueAt(selectedRow, 0);
                    String selectedTitle = (String) tableLivro.getValueAt(selectedRow, 1);
                    String selectedAuthor = (String) tableLivro.getValueAt(selectedRow, 2);
                    String selectedPages = String.valueOf(tableLivro.getValueAt(selectedRow, 3));
                    String selectedYear = String.valueOf(tableLivro.getValueAt(selectedRow, 4));
                    String selectedEdition = String.valueOf(tableLivro.getValueAt(selectedRow, 5));

                    // Define os dados nos campos de texto

                    lblSelecione.setVisible(false);
                    lblAtualizado.setVisible(false);
                }
            });
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private void updateCopyTable() {
        try {
            CopyDao copyDao = new CopyDao();
            List<Copy> copies = copyDao.findAll();

            DefaultTableModel model = (DefaultTableModel) tableExemplar.getModel();
            model.setRowCount(0);

            for (Copy copy : copies) {
                Object[] rowData = {
                    copy.getId(), 
                    copy.getBook().getTitle(),
                    copy.isDisponivel(),
                };
                model.addRow(rowData);
            }

            // Adiciona um listener para a tabela
                tableExemplar.getSelectionModel().addListSelectionListener(e -> {
                int selectedRow = tableExemplar.getSelectedRow();
                if (selectedRow != -1) {
                    // Obtém os dados da linha selecionada
                    Long selectedId = (Long) tableExemplar.getValueAt(selectedRow, 0);
                    String selectedTitle = (String) tableExemplar.getValueAt(selectedRow, 1);
                    String selectedAuthor = (String) tableExemplar.getValueAt(selectedRow, 2);
                    String selectedPages = String.valueOf(tableExemplar.getValueAt(selectedRow, 3));
                    String selectedYear = String.valueOf(tableExemplar.getValueAt(selectedRow, 4));
                    String selectedEdition = String.valueOf(tableExemplar.getValueAt(selectedRow, 5));

                    // Define os dados nos campos de texto

                    lblSelecione.setVisible(false);
                    lblAtualizado.setVisible(false);
                }
            });
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    private void criarCopias(Long Id) throws Exception{
            for(int i = 0;i<(Integer) jSpinner.getValue();i++){
                Book livro = new BookDao().findById(Id);
                Copy copia = new Copy(Id,livro);
                CopyDao copyDao = new CopyDao();
                copyDao.saveOrUpdate(copia);
            }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdicionarExemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdicionarExemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdicionarExemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdicionarExemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdicionarExemplar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualiza;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner;
    private javax.swing.JLabel lblAtualizado;
    private javax.swing.JLabel lblSelecione;
    private javax.swing.JLabel lblTdsLivros;
    private javax.swing.JLabel lblTdsLivros1;
    private javax.swing.JTable tableExemplar;
    private javax.swing.JTable tableLivro;
    // End of variables declaration//GEN-END:variables
}
